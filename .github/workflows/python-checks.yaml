name: Python Quality Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

env:
  PYTHON_VERSION: "3.13"
  WORKING_DIR: server
  PYTHONPATH: "."
  CI: "true"

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          cd ${{ env.WORKING_DIR }}
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run format check
        run: |
          cd ${{ env.WORKING_DIR }}
          make isort-check
          ruff check src/ tests/
          ruff format --check src/ tests/

      - name: Run type checking
        run: |
          cd ${{ env.WORKING_DIR }}
          make typecheck

  test:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ needs.quality-checks.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install dependencies
        run: |
          cd ${{ env.WORKING_DIR }}
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Setup test environment
        run: |
          cd ${{ env.WORKING_DIR }}
          # Create mock directories for platform-specific tests
          mkdir -p ~/.gandalf/cache
          mkdir -p ~/.gandalf/config
          # Set up environment variables for CI testing
          echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: Run tests with coverage
        run: |
          cd ${{ env.WORKING_DIR }}
          pytest --cov=src --cov-report=term --cov-report=xml --cov-fail-under=80 --tb=short -x

      - name: Generate coverage report
        if: always()
        run: |
          cd ${{ env.WORKING_DIR }}
          echo "# Coverage Report" > coverage-report.md
          echo "" >> coverage-report.md
          echo '```' >> coverage-report.md
          python -m coverage report >> coverage-report.md
          echo '```' >> coverage-report.md

      - name: Post coverage results as PR comment
        if: github.event_name == 'pull_request' && always()
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: ${{ env.WORKING_DIR }}/coverage-report.md

  security-scan:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ${{ env.WORKING_DIR }}/.venv
          key: ${{ needs.quality-checks.outputs.cache-key }}

      - name: Install security tools
        run: |
          cd ${{ env.WORKING_DIR }}
          pip install bandit safety

      - name: Run security scan
        run: |
          cd ${{ env.WORKING_DIR }}
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            ${{ env.WORKING_DIR }}/bandit-report.json
            ${{ env.WORKING_DIR }}/safety-report.json
          retention-days: 30
