name: security-scan

on:
  pull_request:
    branches: [main]

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install security tools
        run: |
          cd server
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          cd server
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt -o bandit-report.txt || true

      - name: Run Safety check for known vulnerabilities
        run: |
          cd server
          safety check --json --output safety-report.json || true
          safety check --output safety-report.txt || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            server/bandit-report.txt
            server/safety-report.txt
          retention-days: 30

      - name: Comment PR with security findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '## Security Scan Results\n\n';

            // Bandit results
            if (fs.existsSync('server/bandit-report.txt')) {
              const banditContent = fs.readFileSync('server/bandit-report.txt', 'utf8');
              const issues = banditContent.match(/Issue: .+/g);
              if (issues && issues.length > 0) {
                comment += `### Bandit: ${issues.length} potential security issues found\n`;
                comment += '```\n' + banditContent + '\n```\n\n';
              } else {
                comment += 'Bandit: No security issues found\n\n';
              }
            }

            // Safety results
            if (fs.existsSync('server/safety-report.txt')) {
              const safetyContent = fs.readFileSync('server/safety-report.txt', 'utf8');
              if (safetyContent.includes('Vulnerability found')) {
                comment += `### Safety: Vulnerable dependencies detected\n`;
                comment += '```\n' + safetyContent + '\n```\n\n';
              } else {
                comment += 'Safety: No vulnerable dependencies found\n\n';
              }
            }



            if (comment.includes('issues found') || comment.includes('Vulnerable dependencies')) {
              comment += '**Please review these security findings before merging.**';
            } else {
              comment += '**All security checks passed.**';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
