#!/usr/bin/env bash
################################################################################
# Gandalf MCP Server Setup Script
#
# Sets up Gandalf MCP configurations for available agentic tools and manages
# the ~/.gandalf directory structure.
#
# Usage: ./setup.sh [OPTIONS]
################################################################################

set -euo pipefail

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GANDALF_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Load platform utilities
source "$GANDALF_ROOT/tools/lib/platform-utils.sh"

# Default configurations
MCP_SERVER_NAME="${MCP_SERVER_NAME:-gandalf}"
_get_version() {
    local version_file="$GANDALF_ROOT/VERSION"
    if [[ -f "$version_file" && -r "$version_file" ]]; then
        cat "$version_file" 2>/dev/null || echo "2.2.3"
    else
        echo "2.2.3"
    fi
}

GANDALF_SERVER_VERSION="${GANDALF_SERVER_VERSION:-$(_get_version)}"
ENV_FILE="$GANDALF_ROOT/.env"

# Environment setup
export GANDALF_HOME="${GANDALF_HOME:-$HOME/.gandalf}"

load_env_variables() {
    if [[ -f "$ENV_FILE" ]]; then
        source "$ENV_FILE"
    fi
}

# Global state variables
GANDALF_INSTALLED=false
CURSOR_AVAILABLE=false
CLAUDE_CODE_AVAILABLE=false
CURSOR_SETUP_SUCCESS=false
CLAUDE_CODE_SETUP_SUCCESS=false

# Create ~/.gandalf directory structure
create_gandalf_directory() {
    local gandalf_home="$GANDALF_HOME"

    echo "Setting up $gandalf_home directory structure..."

    mkdir -p "$gandalf_home"/{cache,exports,backups,config} || {
        echo "Failed to create directory structure"
        return 1
    }

    chmod 755 "$gandalf_home"
    find "$gandalf_home" -type d -exec chmod 755 {} \;

    echo "Created $gandalf_home directory structure"
}

# Create installation state file
create_installation_state() {
    local gandalf_root="$GANDALF_ROOT"
    local gandalf_version="$GANDALF_SERVER_VERSION"
    local server_name="$MCP_SERVER_NAME"

    local state_dir="$HOME/.gandalf"
    local state_file="$state_dir/installation-state"

    mkdir -p "$state_dir"

    cat > "$state_file" <<EOF
# Gandalf Installation State
GANDALF_ROOT="$gandalf_root"
GANDALF_VERSION="$gandalf_version"
INSTALLATION_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
SERVER_NAME="$server_name"
CURSOR_INSTALLED=false
CLAUDE_CODE_INSTALLED=false
LAST_UPDATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
EOF

    echo "Installation state saved to: $state_file"
}

# Update installation state with results
update_installation_state() {
    local cursor_success="$CURSOR_SETUP_SUCCESS"
    local claude_success="$CLAUDE_CODE_SETUP_SUCCESS"

    local state_file="$GANDALF_HOME/installation-state"

    if [[ ! -f "$state_file" ]]; then
        create_installation_state
    fi

    cat >> "$state_file" <<EOF

# Setup Results ($(date -u +"%Y-%m-%dT%H:%M:%SZ"))
CURSOR_INSTALLED=$cursor_success
CLAUDE_CODE_INSTALLED=$claude_success
LAST_UPDATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
EOF

    echo "Updated installation state: $state_file"
}

# Load installation state
load_installation_state() {
    local gandalf_home="$GANDALF_HOME"
    local state_file="$gandalf_home/installation-state"

    if [[ -f "$state_file" ]]; then
        source "$state_file" 2>/dev/null || true

        # Check if Gandalf is installed based on state
        if [[ -n "${GANDALF_ROOT:-}" && -d "${GANDALF_ROOT:-}" ]]; then
            GANDALF_INSTALLED=true
            echo "Gandalf installation found: ${GANDALF_ROOT}"
        fi
    else
        echo "No installation state found"
    fi
}

ensure_gandalf_directory() {
    local gandalf_home="$GANDALF_HOME"

    if [[ ! -d "$gandalf_home" ]]; then
        create_gandalf_directory
    else
        mkdir -p "$gandalf_home"/{cache,exports,backups,config}
        echo "Verified $gandalf_home directory structure"
    fi
}

# Show directory info for a subdirectory
show_subdir_info() {
    local subdir="$1"
    local gandalf_home="$2"
    local dir_path="$gandalf_home/$subdir"
    
    if [[ -d "$dir_path" ]]; then
        local size
        local count
        size=$(du -sh "$dir_path" 2>/dev/null | cut -f1 || echo "Unknown")
        count=$(find "$dir_path" -type f 2>/dev/null | wc -l | tr -d ' ')
        echo "$subdir: $size ($count files)"
    else
        echo "$subdir: Not found"
    fi
}

show_gandalf_directory_info() {
    local gandalf_home="$GANDALF_HOME"

    echo "Gandalf Directory Information:"
    echo "Location: $gandalf_home"
    echo "Exists: $([ -d "$gandalf_home" ] && echo "Yes" || echo "No")"

    if [[ -d "$gandalf_home" ]]; then
        echo "Size: $(du -sh "$gandalf_home" 2>/dev/null | cut -f1 || echo "Unknown")"
        echo "Subdirectories:"
        for subdir in cache exports backups config; do
            show_subdir_info "$subdir" "$gandalf_home"
        done
    fi

    local state_file="$gandalf_home/installation-state"
    if [[ -f "$state_file" ]]; then
        echo "  Installation State: Available"
        if load_installation_state; then
            cat <<EOF

Last Updated: ${LAST_UPDATE:-${INSTALLATION_DATE:-Unknown}}
Cursor Installed: ${CURSOR_INSTALLED:-Unknown}
Claude Code Installed: ${CLAUDE_CODE_INSTALLED:-Unknown}

EOF
        fi
    else
        echo "  Installation State: Not found"
    fi
}

update_mcp_config() {
    local config_file="$1"
    local server_name="$2"
    local gandalf_root="$3"
    local jq_expression="$4"
    
    local temp_file
    temp_file=$(mktemp) || {
        echo "Failed to create temporary file"
        return 1
    }
    
    if jq --arg name "$server_name" --arg cmd "$gandalf_root/gandalf" \
        "$jq_expression" "$config_file" >"$temp_file"; then
        mv "$temp_file" "$config_file"
        return 0
    else
        rm -f "$temp_file"
        return 1
    fi
}

ensure_config_file() {
    local config_file="$1"
    local config_dir
    config_dir=$(dirname "$config_file")
    
    mkdir -p "$config_dir" || {
        echo "Failed to create config directory: $config_dir"
        return 1
    }
    
    if [[ ! -f "$config_file" ]]; then
        echo '{"mcpServers": {}}' >"$config_file" || {
            echo "Failed to create config file: $config_file"
            return 1
        }
    fi
}

# Function to detect agentic tool availability
detect_agentic_tool_availability() {
    # Check for Cursor agentic tool using platform-aware detection
    local cursor_config_dir
    cursor_config_dir=$(get_cursor_config_dir)
    local cursor_app_support_dir
    cursor_app_support_dir=$(get_cursor_app_support_dir)

    if [[ -d "$cursor_config_dir" ]] || [[ -d "$cursor_app_support_dir" ]]; then
        CURSOR_AVAILABLE=true
        echo "Cursor IDE detected (config: $cursor_config_dir)"
    else
        echo "Cursor IDE not detected"
        CURSOR_AVAILABLE=false
    fi

    # Check for Claude Code
    if [[ -d "$HOME/.claude" ]] || [[ -d "$HOME/.config/claude" ]]; then
        CLAUDE_CODE_AVAILABLE=true
        echo "Claude Code detected"
    else
        echo "Claude Code not detected"
        CLAUDE_CODE_AVAILABLE=false
    fi
}

# Function to setup Cursor agentic tool configuration
setup_cursor() {
    local server_name="$1"
    local gandalf_root="$2"

    if [[ "$CURSOR_AVAILABLE" != "true" ]]; then
        echo "Skipping Cursor setup - IDE not available"
        return 1
    fi

    echo "Setting up Cursor IDE configuration..."

    local cursor_config_file="$HOME/.cursor/mcp.json"
    
    ensure_config_file "$cursor_config_file" || return 1
    
    local jq_expr='.mcpServers[$name] = {"command": $cmd, "args": ["run"]}'
    
    if update_mcp_config "$cursor_config_file" "$server_name" "$gandalf_root" "$jq_expr"; then
        echo "Cursor IDE setup completed"
        return 0
    else
        echo "Failed to update Cursor configuration"
        return 1
    fi
}

# Function to setup Claude Code configuration
setup_claude_code() {
    local server_name="$1"
    local gandalf_root="$2"

    if [[ "$CLAUDE_CODE_AVAILABLE" != "true" ]]; then
        echo "Skipping Claude Code setup - not available"
        return 1
    fi

    echo "Setting up Claude Code configuration..."

    local claude_config_dir="$HOME/.claude"
    if [[ -d "$HOME/.config/claude" ]]; then
        claude_config_dir="$HOME/.config/claude"
    fi

    local claude_config_file="$claude_config_dir/mcp.json"
    
    ensure_config_file "$claude_config_file" || return 1
    
    local jq_expr='.mcpServers[$name] = {
        "command": $cmd,
        "args": ["run"],
        "env": {
            "PYTHONPATH": "'"$gandalf_root"'/server",
            "CLAUDECODE": "1",
            "CLAUDE_CODE_ENTRYPOINT": "cli"
        }
    }'
    
    if update_mcp_config "$claude_config_file" "$server_name" "$gandalf_root" "$jq_expr"; then
        echo "Claude Code setup completed"
        return 0
    else
        echo "Failed to update Claude Code configuration"
        return 1
    fi
}

# Function to verify Gandalf MCP server
verify_gandalf() {
    if [[ "$GANDALF_INSTALLED" != true ]]; then
        echo "WARNING: Gandalf MCP server not installed"
        echo "Please run ./install.sh first"
        return 1
    fi

    echo "Verifying Gandalf MCP server..."

    if command -v gandalf &>/dev/null; then
        echo "Gandalf MCP server is available"
        gandalf --version 2>/dev/null || echo "Version check failed"
        return 0
    else
        echo "WARNING: Gandalf command not found in PATH"
        return 1
    fi
}

run_setup() {
    if ! ensure_gandalf_directory; then
        echo "ERROR: Failed to set up Gandalf directory structure"
        return 1
    fi
    
    detect_agentic_tool_availability
    load_installation_state
    
    if ! verify_gandalf; then
        echo "Continuing with available agentic tools..."
    fi

    echo "Setting up agentic tool configurations..."
    
    if setup_cursor "$MCP_SERVER_NAME" "$GANDALF_ROOT"; then
        CURSOR_SETUP_SUCCESS=true
    fi
    
    if setup_claude_code "$MCP_SERVER_NAME" "$GANDALF_ROOT"; then
        CLAUDE_CODE_SETUP_SUCCESS=true
    fi
    
    if ! update_installation_state; then
        echo "WARNING: Failed to update installation state"
    fi
}

# Function to show setup summary
show_setup_summary() {
    cat <<EOF

Setup Summary:

Gandalf MCP Server: $([ "$GANDALF_INSTALLED" == true ] && echo "Available" || echo "Not available")
Cursor IDE Setup: $([ "$CURSOR_SETUP_SUCCESS" == true ] && echo "Completed" || echo "Skipped/Failed")
Claude Code Setup: $([ "$CLAUDE_CODE_SETUP_SUCCESS" == true ] && echo "Completed" || echo "Skipped/Failed")

Configuration Files:
- Windsurf rules: Created during install (.windsurfrules + global_rules.md)

EOF
    show_gandalf_directory_info
    cat <<EOF

Next Steps:
1. Install a supported IDE or tool if needed
2. Ensure required template files are present
3. Run this setup script again
EOF
}

# Function to show usage
show_usage() {
    cat <<EOF
Usage: $0 [OPTIONS]

Setup Gandalf MCP configurations for available agentic tools and manage ~/.gandalf directory

OPTIONS:
    -d, --directory DIR  Specify project directory (default: current directory)
    -h, --help          Show this help message
    --info              Show ~/.gandalf directory information and exit

EXAMPLES:
    $0                      # Setup in current directory
    $0 -d /path/to/project  # Setup in specific directory
    $0 --info               # Show directory information

REQUIRED FILES:
    - spec/rules/core.md                 # Core workflows and decision trees
    - spec/rules/troubleshooting.md      # Error recovery and diagnostics
    - CLAUDE.md                             # For Claude Code project memory
    - claude-user-memory.md                 # For Claude Code user memory
    - gandalf-rules.mdc                     # For Cursor rules

NOTE: Rules files are automatically combined during installation for each tool
EOF
}

# Parse command line arguments
parse_args() {
    PROJECT_DIR="$(pwd)"
    SHOW_INFO_ONLY=false

    while [[ $# -gt 0 ]]; do
        case $1 in
        -d | --directory)
            PROJECT_DIR="$2"
            shift 2
            ;;
        --info)
            SHOW_INFO_ONLY=true
            shift
            ;;
        -h | --help)
            show_usage
            exit 0
            ;;
        *)
            echo "ERROR: Unknown option: $1"
            show_usage
            exit 1
            ;;
        esac
    done
}

handle_parsed_args() {
    if [[ "$SHOW_INFO_ONLY" == true ]]; then
        show_gandalf_directory_info
        exit 0
    fi

    if [[ ! -d "$PROJECT_DIR" ]]; then
        echo "ERROR: Project directory does not exist: $PROJECT_DIR"
        exit 1
    fi

    cat <<EOF
Gandalf MCP Server Setup
=======================
Project directory: $PROJECT_DIR
EOF
}

# Main function
main() {
    parse_args "$@"
    handle_parsed_args
    if ! run_setup; then
        echo "ERROR: Setup failed"
        exit 1
    fi
    show_setup_summary
}

# Run main function with all arguments
main "$@"
