#!/usr/bin/env bash
# Lembas bread could not fulfill the hunger of a hobbit, but it could fulfill the hunger of a developer.

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
readonly GANDALF_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
export GANDALF_HOME="${GANDALF_HOME:-$HOME/.gandalf}"

cleanup_handler() {
    echo -e "\nLembas interrupted. Cleaning up..." >&2
    
    if [[ -n "${CHILD_PIDS:-}" ]]; then
        for pid in "${CHILD_PIDS[@]}"; do
            if kill -0 "$pid" 2>/dev/null; then
                kill -TERM "$pid" 2>/dev/null || true
            fi
        done
        
        # Give processes time to terminate gracefully
        sleep 1
        
        # Force kill any remaining processes
        for pid in "${CHILD_PIDS[@]}"; do
            if kill -0 "$pid" 2>/dev/null; then
                kill -KILL "$pid" 2>/dev/null || true
            fi
        done
    fi
    
    exit 130
}
declare -a CHILD_PIDS=()
trap cleanup_handler INT TERM

readonly DEFAULT_TIMEOUT=300
readonly DEFAULT_WAIT_TIME=2


print_header() {
    local message="$1"
    cat <<EOF

==========================================
$message
==========================================
EOF
}

print_info() {
    local message="$1"
    echo "[INFO] $message"
}

print_error() {
    local message="$1"
    echo "[ERROR] $message" >&2
}

show_help() {
    cat <<EOF
Lembas - Comprehensive Test Suite and Validation

Usage: $0 [OPTIONS]

Options:
    --core              Run core tests only (default)
    --all               Run all tests (shell + python)
    --shell-only        Run shell tests only
    --python-only       Run python tests only
    --timeout SECONDS   Set test timeout (default: $DEFAULT_TIMEOUT)
    --verbose           Enable verbose output
    --help, -h          Show this help message

Examples:
    $0                  # Run core tests
    $0 --all            # Run all tests
    $0 --verbose        # Run with verbose output
    $0 --timeout 600    # Set 10-minute timeout

The name 'Lembas' comes from the Elvish waybread that sustained travelers
on long journeys, just as this test suite sustains the development process.

EOF
}

check_test_environment() {
    print_info "Checking test environment..."

    local -a required_dirs=("server" "tools/tests")
    local -a required_files=("server/src/main.py" "tools/tests/shell-tests-manager.sh")

    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$GANDALF_ROOT/$dir" ]]; then
            print_error "Required directory missing: $dir"
            return 1
        fi
    done

    for file in "${required_files[@]}"; do
        if [[ ! -f "$GANDALF_ROOT/$file" ]]; then
            print_error "Required file missing: $file"
            return 1
        fi
    done

    if ! command -v python3 &>/dev/null; then
        print_error "Python 3 not found"
        return 1
    fi

    local python_version
    python_version=$(python --version 2>/dev/null)
    echo "Python $python_version found"

    if ! command -v bats &>/dev/null; then
        print_error "BATS not found (needed for shell tests)"
        return 1
    fi

    print_info "Test environment verified"
    return 0
}

run_shell_tests() {
    local verbose="${1:-false}"
    local timeout="${2:-$DEFAULT_TIMEOUT}"

    print_header "Running Shell Tests"

    local test_args=()

    timeout "$timeout" bash "$GANDALF_ROOT/tools/bin/test-runner" --shell ${test_args[@]+"${test_args[@]}"} &
    local test_pid=$!
    CHILD_PIDS+=("$test_pid")
    
    if wait "$test_pid"; then
        print_info "Shell tests completed successfully"
        return 0
    else
        print_error "Shell tests failed"
        return 1
    fi
}

run_python_tests() {
    local verbose="${1:-false}"
    local timeout="${2:-$DEFAULT_TIMEOUT}"

    print_header "Running Python Tests"

    local test_args=()

    timeout "$timeout" bash "$GANDALF_ROOT/tools/bin/test-runner" --python ${test_args[@]+"${test_args[@]}"} &
    local test_pid=$!
    CHILD_PIDS+=("$test_pid")
    
    if wait "$test_pid"; then
        print_info "Python tests completed successfully"
        return 0
    else
        print_error "Python tests failed"
        return 1
    fi
}

run_core_tests() {
    local verbose="${1:-false}"
    local timeout="${2:-$DEFAULT_TIMEOUT}"

    print_header "Running Core Tests"

    local test_args=()

    timeout "$timeout" bash "$GANDALF_ROOT/tools/bin/test-runner" --shell ${test_args[@]+"${test_args[@]}"} &
    local test_pid=$!
    CHILD_PIDS+=("$test_pid")
    
    if wait "$test_pid"; then
        print_info "Core tests completed successfully"
        return 0
    else
        print_error "Core tests failed"
        return 1
    fi
}

run_all_tests() {
    local verbose="${1:-false}"
    local timeout="${2:-$DEFAULT_TIMEOUT}"

    print_header "Running All Tests"

    local test_args=()

    timeout "$timeout" bash "$GANDALF_ROOT/tools/bin/test-runner" ${test_args[@]+"${test_args[@]}"} &
    local test_pid=$!
    CHILD_PIDS+=("$test_pid")
    
    if wait "$test_pid"; then
        print_info "All tests completed successfully"
        return 0
    else
        print_error "All tests failed"
        return 1
    fi
}

parse_arguments() {
    local test_type="core"
    local verbose="false"
    local timeout="$DEFAULT_TIMEOUT"

    while [[ $# -gt 0 ]]; do
        case "$1" in
        --core)
            test_type="core"
            shift
            ;;
        --all)
            test_type="all"
            shift
            ;;
        --shell-only)
            test_type="shell"
            shift
            ;;
        --python-only)
            test_type="python"
            shift
            ;;
        --verbose)
            verbose="true"
            shift
            ;;
        --timeout)
            timeout="$2"
            if ! [[ "$timeout" =~ ^[0-9]+$ ]]; then
                print_error "Timeout must be a positive integer"
                return 1
            fi
            shift 2
            ;;
        --help | -h)
            show_help
            return 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            return 1
            ;;
        esac
    done

    export LEMBAS_TEST_TYPE="$test_type"
    export LEMBAS_VERBOSE="$verbose"
    export LEMBAS_TIMEOUT="$timeout"
    return 0
}

main() {
    if ! parse_arguments "$@"; then
        exit 1
    fi

    print_header "Lembas - Comprehensive Test Suite"
    print_info "Test type: $LEMBAS_TEST_TYPE"
    print_info "Verbose: $LEMBAS_VERBOSE"
    print_info "Timeout: ${LEMBAS_TIMEOUT}s"

    if ! check_test_environment; then
        exit 1
    fi

    local start_time end_time duration
    start_time=$(date +%s)

    case "$LEMBAS_TEST_TYPE" in
    core)
        run_core_tests "$LEMBAS_VERBOSE" "$LEMBAS_TIMEOUT"
        ;;
    all)
        run_all_tests "$LEMBAS_VERBOSE" "$LEMBAS_TIMEOUT"
        ;;
    shell)
        run_shell_tests "$LEMBAS_VERBOSE" "$LEMBAS_TIMEOUT"
        ;;
    python)
        run_python_tests "$LEMBAS_VERBOSE" "$LEMBAS_TIMEOUT"
        ;;
    *)
        print_error "Unknown test type: $LEMBAS_TEST_TYPE"
        exit 1
        ;;
    esac

    local exit_code=$?
    end_time=$(date +%s)
    duration=$((end_time - start_time))

    if [[ $exit_code -eq 0 ]]; then
        print_header "Lembas Complete - Journey Successful!"
        print_info "Total time: ${duration}s"
    else
        print_header "Lembas Failed - Journey Interrupted"
        print_error "Tests failed after ${duration}s"
    fi

    exit $exit_code
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
